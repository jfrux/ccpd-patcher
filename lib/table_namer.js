// Generated by CoffeeScript 1.6.2
(function() {
  var async, baseDir, csv, csvFile, files, fs, get_files_list, get_table_names, homeDir, inDir, loop_files, mkdirp, outDir, path, process_file, tables, walk;

  fs = require("fs");

  csv = require("fast-csv");

  async = require("async");

  mkdirp = require("mkdirp");

  path = require("path-extra");

  homeDir = path.homedir();

  csvFile = process.cwd() + '/fixtures/ccpd_table_synonyms.csv';

  baseDir = path.join(homeDir, "Projects", "ccpd-platform");

  inDir = path.join(baseDir, "_com");

  outDir = path.join(baseDir, "_com");

  mkdirp.sync(outDir);

  walk = function(dir, done) {
    var results;

    results = [];
    fs.readdir(dir, function(err, list) {
      var i, next;

      if (err) {
        return done(err);
      }
      i = 0;
      (next = function() {
        var file;

        file = list[i++];
        if (!file) {
          return done(null, results);
        }
        file = path.join(dir, file);
        return fs.stat(file, function(err, stat) {
          var newPath;

          if (stat && stat.isDirectory()) {
            walk(file, function(err, res) {
              results = results.concat(res);
              next();
            });
          } else {
            newPath = file.replace(inDir, '');
            results.push(newPath);
            next();
          }
        });
      })();
    });
  };

  console.log("[CONFIG] " + inDir);

  console.log("[CONFIG] " + outDir);

  files = [];

  tables = [];

  get_table_names = function(callback) {
    var cb;

    cb = callback;
    csv(csvFile, {
      headers: true
    }).on("data", function(data) {
      tables.push(data);
    }).on("end", function() {
      cb(null, "one");
    }).parse();
  };

  get_files_list = function(callback) {
    var cb;

    cb = callback;
    walk(inDir, function(err, results) {
      if (err) {
        return console.log(err);
      }
      files = results;
      cb(null, "two");
    });
  };

  loop_files = function(callback) {
    var cb;

    cb = callback;
    async.eachLimit(files, 5, process_file, function(err) {});
  };

  process_file = function(file, callback) {
    var cb_main, inFile, outFile;

    console.log("[" + path.basename(file) + "] Processing...");
    cb_main = callback;
    inFile = path.join(inDir, file);
    outFile = path.join(outDir, file);
    return fs.readFile(inFile, "utf8", function(err, data) {
      var theData;

      theData = data;
      async.eachSeries(tables, (function(table, callback) {
        var cb, fileDir, finds, regEx;

        console.log("[" + path.basename(file) + "] Replacing '" + table.old_name + "' with '" + table.new_name + "'");
        cb = callback;
        regEx = new RegExp(table.old_name, "ig");
        finds = theData.match(regEx);
        theData = theData.replace(regEx, table.new_name);
        fileDir = path.dirname(outFile);
        mkdirp(fileDir, function(err) {
          fs.writeFile(outFile, theData, "utf8", function() {
            cb(null);
          });
        });
      }), function(err) {
        cb_main();
      });
    });
  };

  async.series([get_table_names, get_files_list, loop_files]);

}).call(this);
